{
  "version": 3,
  "sources": ["../../../app/routes/app.delivery-customization.$functionId.$id.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\app.delivery-customization.$functionId.$id.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\app.delivery-customization.$functionId.$id.jsx\");\n  import.meta.hot.lastModified = \"1691868490819.5356\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from \"react\";\nimport { Banner, Card, FormLayout, Layout, Page, TextField } from \"@shopify/polaris\";\nimport { Form, useActionData, useNavigation, useSubmit, useLoaderData } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\nimport { authenticate } from \"../shopify.server\";\nexport const loader = async ({\n  params,\n  request\n}) => {\n  const {\n    functionId,\n    id\n  } = params;\n  const {\n    admin\n  } = await authenticate.admin(request);\n  if (id != \"new\") {\n    const gid = `gid://shopify/DeliveryCustomization/${id}`;\n    const response = await admin.graphql(`#graphql\n        query getDeliveryCustomization($id: ID!) {\n          deliveryCustomization(id: $id) {\n            id\n            title\n            enabled\n            metafield(namespace: \"$app:delivery-customization\", key: \"function-configuration\") {\n              id\n              value\n            }\n          }\n        }`, {\n      variables: {\n        id: gid\n      }\n    });\n    const responseJson = await response.json();\n    const deliveryCustomization = responseJson.data.deliveryCustomization;\n    const metafieldValue = JSON.parse(deliveryCustomization.metafield.value);\n    return {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stateProvinceCode: metafieldValue.stateProvinceCode,\n        message: metafieldValue.message\n      })\n    };\n  }\n  return {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      stateProvinceCode: \"\",\n      message: \"\"\n    })\n  };\n};\nexport const action = async ({\n  params,\n  request\n}) => {\n  const {\n    functionId,\n    id\n  } = params;\n  const {\n    admin\n  } = await authenticate.admin(request);\n  const formData = await request.formData();\n  const stateProvinceCode = formData.get(\"stateProvinceCode\");\n  const message = formData.get(\"message\");\n  const deliveryCustomizationInput = {\n    functionId,\n    title: `Change ${stateProvinceCode} delivery message`,\n    enabled: true,\n    metafields: [{\n      namespace: \"$app:delivery-customization\",\n      key: \"function-configuration\",\n      type: \"json\",\n      value: JSON.stringify({\n        stateProvinceCode,\n        message\n      })\n    }]\n  };\n  if (id != \"new\") {\n    const response = await admin.graphql(`#graphql\n        mutation updateDeliveryCustomization($id: ID!, $input: DeliveryCustomizationInput!) {\n          deliveryCustomizationUpdate(id: $id, deliveryCustomization: $input) {\n            deliveryCustomization {\n              id\n            }\n            userErrors {\n              message\n            }\n          }\n        }`, {\n      variables: {\n        id: `gid://shopify/DeliveryCustomization/${id}`,\n        input: deliveryCustomizationInput\n      }\n    });\n    const responseJson = await response.json();\n    const errors = responseJson.data.deliveryCustomizationUpdate?.userErrors;\n    return json({\n      errors\n    });\n  } else {\n    const response = await admin.graphql(`#graphql\n        mutation createDeliveryCustomization($input: DeliveryCustomizationInput!) {\n          deliveryCustomizationCreate(deliveryCustomization: $input) {\n            deliveryCustomization {\n              id\n            }\n            userErrors {\n              message\n            }\n          }\n        }`, {\n      variables: {\n        input: deliveryCustomizationInput\n      }\n    });\n    const responseJson = await response.json();\n    const errors = responseJson.data.deliveryCustomizationCreate?.userErrors;\n    return json({\n      errors\n    });\n  }\n};\nexport default function DeliveryCustomization() {\n  _s();\n  const submit = useSubmit();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const loaderData = useLoaderData();\n  const [stateProvinceCode, setStateProvinceCode] = useState(loaderData.stateProvinceCode);\n  const [message, setMessage] = useState(loaderData.message);\n  useEffect(() => {\n    if (loaderData) {\n      const parsedData = JSON.parse(loaderData.body);\n      setStateProvinceCode(parsedData.stateProvinceCode);\n      setMessage(parsedData.message);\n    }\n  }, [loaderData]);\n  const isLoading = navigation.state === \"submitting\";\n  useEffect(() => {\n    if (actionData?.errors.length === 0) {\n      open('shopify:admin/settings/shipping/customizations', '_top');\n    }\n  }, [actionData?.errors]);\n  const errorBanner = actionData?.errors.length ? <Layout.Section>\r\n    <Banner title=\"There was an error creating the customization.\" status=\"critical\">\r\n      <ul>\r\n        {actionData?.errors.map((error, index) => {\n          return <li key={`${index}`}>{error.message}</li>;\n        })}\r\n      </ul>\r\n    </Banner>\r\n  </Layout.Section> : null;\n  const handleSubmit = () => {\n    submit({\n      stateProvinceCode,\n      message\n    }, {\n      method: \"post\"\n    });\n  };\n  return <Page title=\"Change delivery message\" backAction={{\n    content: \"Delivery customizations\",\n    onAction: () => open('shopify:admin/settings/shipping/customizations', '_top')\n  }} primaryAction={{\n    content: \"Save\",\n    loading: isLoading,\n    onAction: handleSubmit\n  }}>\r\n    <Layout>\r\n      {errorBanner}\r\n      <Layout.Section>\r\n        <Card>\r\n          <Form method=\"post\">\r\n            <FormLayout>\r\n              <FormLayout.Group>\r\n                <TextField name=\"stateProvinceCode\" type=\"text\" label=\"State/Province code\" value={stateProvinceCode} onChange={setStateProvinceCode} disabled={isLoading} requiredIndicator autoComplete=\"on\" />\r\n                <TextField name=\"message\" type=\"text\" label=\"Message\" value={message} onChange={setMessage} disabled={isLoading} requiredIndicator autoComplete=\"off\" />\r\n              </FormLayout.Group>\r\n            </FormLayout>\r\n          </Form>\r\n        </Card>\r\n      </Layout.Section>\r\n    </Layout>\r\n  </Page>;\n}\n_s(DeliveryCustomization, \"QtjDy3k76+gzcKRrYgkaNk6CfzI=\", false, function () {\n  return [useSubmit, useActionData, useNavigation, useLoaderData];\n});\n_c = DeliveryCustomization;\nvar _c;\n$RefreshReg$(_c, \"DeliveryCustomization\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
